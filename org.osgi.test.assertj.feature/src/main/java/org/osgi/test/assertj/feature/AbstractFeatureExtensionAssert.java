/*******************************************************************************
 * Copyright (c) Contributors to the Eclipse Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 *******************************************************************************/

package org.osgi.test.assertj.feature;

import java.util.List;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.api.InstanceOfAssertFactories;
import org.assertj.core.api.InstanceOfAssertFactory;
import org.assertj.core.api.ListAssert;
import org.osgi.service.feature.FeatureExtension;
import org.osgi.service.feature.ID;

/**
 * Abstract base class for {@link FeatureExtension} specific assertions -
 * Generated by CustomAssertionGenerator.
 */
public abstract class AbstractFeatureExtensionAssert<S extends AbstractFeatureExtensionAssert<S, A>, A extends FeatureExtension>
	extends AbstractObjectAssert<S, A> {

	/**
	 * Creates a new <code>{@link AbstractFeatureExtensionAssert}</code> to make
	 * assertions on actual FeatureExtension.
	 *
	 * @param actual the FeatureExtension we want to make assertions on.
	 */
	protected AbstractFeatureExtensionAssert(A actual, Class<S> selfType) {
		super(actual, selfType);
	}

	@SuppressWarnings("rawtypes")
	static InstanceOfAssertFactory<List, ListAssert<ID>> ID_LIST = InstanceOfAssertFactories.list(ID.class);

	public ListAssert<ID> hasArtefactsThat() {
		return isNotNull().extracting(f -> f.getArtifacts(), ID_LIST)
			.as(actual + ".bundles");
	}

	/**
	 * Verifies that the actual FeatureExtension's jSON is equal to the given
	 * one.
	 *
	 * @param jSON the given jSON to compare the actual FeatureExtension's jSON
	 *            to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual FeatureExtension's jSON is not
	 *             equal to the given one.
	 */
	public S hasJSON(String jSON) {
		return has(FeaturesConditions.FeatureExtensionConditions.json(jSON));
	}

	public S hasJSONMatching(String patten) {
		return has(FeaturesConditions.FeatureExtensionConditions.jsonMatches(patten));
	}

	/**
	 * Verifies that the actual FeatureExtension's kind is equal to the given
	 * one.
	 *
	 * @param kind the given kind to compare the actual FeatureExtension's kind
	 *            to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual FeatureExtension's kind is not
	 *             equal to the given one.
	 */
	public S hasKind(FeatureExtension.Kind kind) {
		return has(FeaturesConditions.FeatureExtensionConditions.kind(kind));
	}

	public S hasKindMandantory() {
		return has(FeaturesConditions.FeatureExtensionConditions.kindMandantory());
	}

	public S hasKindOptional() {
		return has(FeaturesConditions.FeatureExtensionConditions.kindOptional());
	}

	public S hasKindTransient() {
		return has(FeaturesConditions.FeatureExtensionConditions.kindTransient());
	}

	/**
	 * Verifies that the actual FeatureExtension's name is equal to the given
	 * one.
	 *
	 * @param name the given name to compare the actual FeatureExtension's name
	 *            to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual FeatureExtension's name is not
	 *             equal to the given one.
	 */
	public S hasName(String name) {
		return has(FeaturesConditions.FeatureExtensionConditions.name(name));
	}

	/**
	 * Verifies that the actual FeatureExtension's type is equal to the given
	 * one.
	 *
	 * @param type the given type to compare the actual FeatureExtension's type
	 *            to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual FeatureExtension's type is not
	 *             equal to the given one.
	 */
	public S hasType(FeatureExtension.Type type) {
		return has(FeaturesConditions.FeatureExtensionConditions.type(type));
	}

	public S hasTypeArtifacts() {
		return has(FeaturesConditions.FeatureExtensionConditions.typeArtifacts());
	}

	public S hasTypeJson() {
		return has(FeaturesConditions.FeatureExtensionConditions.typeJson());
	}

	public S hasTypeText() {
		return has(FeaturesConditions.FeatureExtensionConditions.typeText());
	}

}
