/*******************************************************************************
 * Copyright (c) Contributors to the Eclipse Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 *******************************************************************************/

package org.osgi.test.assertj.feature;

import java.util.Map;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.api.InstanceOfAssertFactories;
import org.assertj.core.api.InstanceOfAssertFactory;
import org.assertj.core.api.MapAssert;
import org.osgi.service.feature.FeatureConfiguration;

/**
 * Abstract base class for {@link FeatureConfiguration} specific assertions -
 * Generated by CustomAssertionGenerator.
 */
public abstract class AbstractFeatureConfigurationAssert<S extends AbstractFeatureConfigurationAssert<S, A>, A extends FeatureConfiguration>
	extends AbstractObjectAssert<S, A> {
	// TODO: is factory

	/**
	 * Creates a new <code>{@link AbstractFeatureConfigurationAssert}</code> to
	 * make assertions on actual FeatureConfiguration.
	 *
	 * @param actual the FeatureConfiguration we want to make assertions on.
	 */
	protected AbstractFeatureConfigurationAssert(A actual, Class<S> selfType) {
		super(actual, selfType);
	}

	/**
	 * Verifies that the actual FeatureConfiguration's factoryPid is equal to
	 * the given one.
	 *
	 * @param factoryPid the given factoryPid to compare the actual
	 *            FeatureConfiguration's factoryPid to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual FeatureConfiguration's factoryPid
	 *             is not equal to the given one.
	 */
	public S hasFactoryPid(String factoryPid) {
		return isNotNull().has(FeaturesConditions.FeatureConfigurationConditions.factoryPid(factoryPid));
	}

	/**
	 * Verifies that the actual FeatureConfiguration is a factoryConfiguration
	 *
	 * @return this assertion object.
	 * @throws AssertionError - if the actual FeatureConfiguration is not a
	 *             factoryConfiguration.
	 */
	public S isFactoryConfiguration() {
		return isNotNull().is(FeaturesConditions.FeatureConfigurationConditions.factoryConfiguration());
	}

	/**
	 * Verifies that the actual FeatureConfiguration's pid is equal to the given
	 * one.
	 *
	 * @param pid the given pid to compare the actual FeatureConfiguration's pid
	 *            to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual FeatureConfiguration's pid is not
	 *             equal to the given one.
	 */
	public S hasPid(String pid) {
		return isNotNull().has(FeaturesConditions.FeatureConfigurationConditions.pid(pid));
	}

	@SuppressWarnings("rawtypes")
	static InstanceOfAssertFactory<Map, MapAssert<String, Object>> VALUES_MAP = InstanceOfAssertFactories
		.map(String.class, Object.class);

	public MapAssert<String, Object> hasValuesThat() {
		return isNotNull().extracting(f -> f.getValues(), VALUES_MAP)
			.as(actual + ".values");
	}

}
